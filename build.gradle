plugins {
  id 'java-gradle-plugin'
  id 'signing'
  id 'maven-publish'
}

group 'de.heisluft.modding'
version '0.2.2-pre+28'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
  maven {
    url 'https://maven.minecraftforge.net/'
  }
  maven {
    url 'https://heisluft.de/maven/'
  }
}

dependencies {
  implementation 'net.minecraftforge:artifactural:3.0.8'
  implementation 'io.github.java-diff-utils:java-diff-utils:4.12'
  implementation 'com.googlecode.json-simple:json-simple:1.4.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

gradlePlugin{
  plugins.create('jarModDevPlugin') {
    id = 'de.heisluft.modding.classic.jarmoddev'
    implementationClass = 'de.heisluft.modding.plugins.JarModDevPlugin'
  }
  plugins.create('deobfDataDevPlugin') {
    id = 'de.heisluft.modding.classic.deobfdatadev'
    implementationClass = 'de.heisluft.modding.plugins.DeobfDataDevPlugin'
  }
}

// The below is needed so we automatically generate a Constants.java file dynamically *before* we import the project
sourceSets.main.java.srcDir "$buildDir/generated/java"
file("$buildDir/generated/java/de/heisluft/modding").mkdirs()
file("$buildDir/generated/java/de/heisluft/modding/Constants.java").newWriter().withWriter {
  w -> w << "package $group;\n\n" +
      "/** Auto-Generated Class containing the plugin version. */\n" +
      "public final class Constants {\n" +
      "  /** The plugin version */\n" +
      "  public static final String VERSION = \"$version\";\n" +
      "}"
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set 'sources'
  from sourceSets.main.allSource
}

publishing {
  repositories.maven {
    url mavenUrl
    credentials {
      username = mavenUsername
      password = mavenPassword
    }
    authentication.withType(BasicAuthentication)
  }
  publications.create('pluginMaven', MavenPublication) {
    it.artifact sourcesJar
  }
}

signing {
  useGpgCmd()
  sign publishing.publications.pluginMaven
}

test {
  useJUnitPlatform()
}